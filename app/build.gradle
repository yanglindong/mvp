apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'

android {
    defaultConfig {
        resConfigs "zh"
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "com.android.mvp"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        jackOptions {
            enabled true
        }

    }

    signingConfigs {
        office_sh {
            keyAlias 'office'
            keyPassword '123456'
            storeFile file('D:/svn/mvp/office_sh.jks')
            storePassword '123456'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.office_sh
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug{
            signingConfig signingConfigs.office_sh
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            jniLibs.srcDirs = ['libs']
        }
    }
    // This is important, it will run lint checks but won't abort build
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    tasks.withType(JavaCompile) {
        options.encoding = "utf-8"
    }
    dexOptions {
        javaMaxHeapSize '2g'
    }
    defaultConfig {
        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':mylibrary')
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-5'
    //3D地图
    compile 'com.amap.api:3dmap:latest.integration'
    // 2D地图
    compile 'com.amap.api:map2d:latest.integration'
    //  定位
    compile 'com.amap.api:location:latest.integration'
}
